The demo program is a simple painting utility with a resizeable grid of size between 5x5 and 20x20.
It doesn't really allow saving or loading the drawn picture, its colour choice is very limited and the pencil tool is shoddy,
but the main point is to showcase the undo/redo functionality anyway.

How to use
==========

Click on the coloured squares to choose a colour. Choosing a colour to paint with is not an undoable action.

Draw on the grid with the chosen colour by holding down the left mouse button and moving the mouse above the grid.
All colour changes made within a single mouse hold (with no pressing/releasing in-between) are treated as the same move.

Click on "Add column"/"Remove column"/"Add row"/"Remove row" buttons to resize the grid (newly added cells are gray).
Adding or removing a single column or row is treated as its own move, independent from the colour changes.

Click on "Undo"/"Undo all"/"Redo"/"Redo all" buttons to undo or redo certain moves.
Additionally, you can use Ctrl+Z and Ctrl+Y shortcuts to undo and redo a single move, respectively.

How it works
============

The demo room consists only of a ctrl_Demo instance, which eventually sets up other instances.

Demo objects
------------

In the Create event, the ctrl_Demo instance calls `undo_stack_create()` to make undoable changes usable.
It also sets up instances of obj_ColorGrid, obj_ColorPicker and obj_TextButton.
Finally, it calls `undo_stack_destroy()` in its Clean Up event (though moving to another room should suffice as well).

obj_Color grid creates a colours ds_grid in its Create event and destroys the grid in its Clean Up event.

In the Begin Step event, ctrl_Demo checks whether the left mouse button was pressed down, and calls `undo_stack_begin_move()` if it was.
In the Step event obj_ColorGrid checks if the left mouse button is held over the grid, and if so, it paints a hovered cell with the currently selected colour.
It does so by creating an instance of ColorCellChange struct (inheriting from UndoableChange), and passes it to the `undo_stack_apply_change(...)` call.

To sum it up:

- pressing the left mouse button anywhere begins a new move (repeated mouse pressed with no undoable changes have no effect)
- holding the left mouse button and moving mouse over the grid generates a series of undoable cell colour changes
- as a result, each press-and-hold mouse move creates a single undoable pencil stroke

Each obj_ColorPicker checks for a left mouse button press in its Step Event, and changes the selected colour when clicked.
It doesn't use any `undo_stack_*` functions, because colour picking doesn't require undoing/redoing in the first place.

Like colour pickers, each obj_TextButton instance checks for the left mouse button press in its Step Event and performs an associated action when clicked.
The associated actions are defined during creation of obj_TextButton in ctrl_Demo Create event. They are the following:

- "Add column" checks if the colours grid width is below 20; if so, it creates and applies a ColumnAddChange (using `undo_stack_apply_change(...)`)
- "Remove column" checks if the colours grid width is above 5; if so, it creates and applies a ColumnRemoveChange
- "Add row" checks if the colours grid height is below 20; if so, it creates and applies a RowAddChange
- "Remove row" checks if the colours grid height is above 5; if so, it creates and applies a RowRemoveChange
- "Undo" simply calls `undo_stack_undo()`
- "Undo all" simply calls `undo_stack_undo_all()`
- "Redo" simply calls `undo_stack_redo()`
- "Redo all" simply calls `undo_stack_redo_all()`

Undoable changes
----------------

In the **Demo >> Changes** folder, various constructors inheriting from UndoableChange are defined.

A CellColorChange struct takes a ds_grid, a target cell row/column and a new colour as parameters.
Aside from these, it stores the previous cell colour for a potential undoing operation.
In its `apply()` method, it sets the value of the target ds_grid cell to the target colour.
In its `undo()` method, it restores the value of the target ds_grid cell to the previous colour.

A ColumnAddChange struct takes a ds_grid as its only parameter. It doesn't store any additional values.
In its `apply()` method, it resizes the grid to be 1 cell wider. It also makes all the new cells gray.
In its `undo()` method, it simply resizes the grid to be 1 cell narrower.

A ColumnRemoveChange struct takes a ds_grid as its only parameter.
Aside from the grid, it stores the cell colours from the column to be removed, for a potential undoing operation.
In its `apply()` method, it simply resizes the grid to be 1 cell narrower.
In its `undo()` method, it resizes the grid to be 1 cell wider. It also uses the stored cell colours to paint the newly restored column.

The RowAddChange and RowRemoveChange structs are like their ColumnAddChange/ColumnRemoveChange counterparts, except they change the grid height rather than the width.
